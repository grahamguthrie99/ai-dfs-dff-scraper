# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Provider(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str = None, platform: str = None, _date: str = None, sport: str = None):  # noqa: E501
        """Provider - a model defined in Swagger

        :param name: The name of this Provider.  # noqa: E501
        :type name: str
        :param platform: The platform of this Provider.  # noqa: E501
        :type platform: str
        :param _date: The _date of this Provider.  # noqa: E501
        :type _date: str
        :param sport: The sport of this Provider.  # noqa: E501
        :type sport: str
        """
        self.swagger_types = {
            'name': str,
            'platform': str,
            '_date': str,
            'sport': str
        }

        self.attribute_map = {
            'name': 'name',
            'platform': 'platform',
            '_date': 'date',
            'sport': 'sport'
        }
        self._name = name
        self._platform = platform
        self.__date = _date
        self._sport = sport

    @classmethod
    def from_dict(cls, dikt) -> 'Provider':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Provider of this Provider.  # noqa: E501
        :rtype: Provider
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Provider.

        Daily fatansy sports data provider  # noqa: E501

        :return: The name of this Provider.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Provider.

        Daily fatansy sports data name  # noqa: E501

        :param name: The name of this Provider.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def platform(self) -> str:
        """Gets the platform of this Provider.

        Daily fantasy sports competition platform  # noqa: E501

        :return: The platform of this Provider.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform: str):
        """Sets the platform of this Provider.

        Daily fantasy sports competition platform  # noqa: E501

        :param platform: The platform of this Provider.
        :type platform: str
        """
        if platform is None:
            raise ValueError("Invalid value for `platform`, must not be `None`")  # noqa: E501

        self._platform = platform

    @property
    def _date(self) -> str:
        """Gets the _date of this Provider.

        Date  # noqa: E501

        :return: The _date of this Provider.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date: str):
        """Sets the _date of this Provider.

        Date  # noqa: E501

        :param _date: The _date of this Provider.
        :type _date: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def sport(self) -> str:
        """Gets the sport of this Provider.

        Sport  # noqa: E501

        :return: The sport of this Provider.
        :rtype: str
        """
        return self._sport

    @sport.setter
    def sport(self, sport: str):
        """Sets the sport of this Provider.

        Sport  # noqa: E501

        :param sport: The sport of this Provider.
        :type sport: str
        """
        if sport is None:
            raise ValueError("Invalid value for `sport`, must not be `None`")  # noqa: E501

        self._sport = sport
